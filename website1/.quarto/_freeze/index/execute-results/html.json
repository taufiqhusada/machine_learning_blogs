{
  "hash": "3d808eae4b636934f5224f63a5994920",
  "result": {
    "markdown": "---\ntitle: Learning Classification Algorithm using Titanic Dataset\n---\n\nIn this blog we will learn some classfication algorithm using the famous titanic dataset\n<ul>\n<li> dataset: https://www.kaggle.com/competitions/titanic/data </li>\n<li> task: build a predictive model that predict whether a person survive in the titanic insident based on several factors (e.g., name, age, cabin, etc.) </li>\n</ul>\nWe will learn some basic data exploration technique, feature engineering, and classification algorithm\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nfrom sklearn.preprocessing import LabelEncoder\nfrom datetime import datetime\n\nimport warnings\nwarnings.filterwarnings('ignore')\n```\n:::\n\n\n## Data Exploration\n\nLets see the preview of the dataset\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf_train = pd.read_csv('data/train.csv')\ndf_train.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf_test = pd.read_csv('data/test.csv')\ndf_test.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow let's see some pattern on the dataset\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsns.barplot(x=df_train['Sex'], y=df_train['Survived']) \n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n<Axes: xlabel='Sex', ylabel='Survived'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-2.png){width=589 height=429}\n:::\n:::\n\n\nBased on the plot above we can see that female are much more likely to survive compared to men\n\nNow let's find the correlation among the features on the data using heatmap\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nsns.heatmap(df_train.corr(),annot=True) \nfig=plt.gcf()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=612 height=484}\n:::\n:::\n\n\nBased on the heatmap above we can see that \"PClass\" and \"Fare\" is highly correlated to the \"Survived\" column, whereas other column is not highly correlated with \"Survived\" column. <br>\nBut since \"Fare\" also highly correlated with \"PClass\" then we just need \"PClass\" column\n\n## Feature Engineering\n\nBased on our data exploration above we will only use column \"Sex\" and \"PClass\" to predict the survival of each person since those two features are highly correlated with the survival\n\nSo here is the step of feature engineering that we will do:\n\n1. Convert \"Sex\" column into a 0/1 valued column since this column has a categorical data (\"female/male\"). We can call this column \"IsMale\"\n2. Create new column TicketFreq based on column Ticket. Will explain about this later\n3. Drop columns other unnecessary column\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n## Create new column \"IsMale\"\n\ndf_train_transformed = df_train.copy()\ndf_train_transformed[\"IsMale\"] = df_train[\"Sex\"].apply(lambda x: x == \"male\")\ndf_train_transformed.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>IsMale</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTicket Frequency is a ticket-based feature that includes people who have the same ticket number. This feature can serve as group size as it puts people who travel with the same ticket number together, whether they are related or not.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf_train_transformed['TicketFreq'] = df_train.groupby('Ticket')['Ticket'].transform('count')\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n## Drop unwanted columns\ndf_train_transformed = df_train_transformed.drop(['PassengerId','Ticket', 'Sex', 'Name', 'Fare', 'Age', 'Parch', 'SibSp','Cabin', 'Embarked'], axis=1) \ndf_train_transformed.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>IsMale</th>\n      <th>TicketFreq</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>True</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>True</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSince we need to do the same feature engineering process on the test dataset, so let's wrap all the process into a single function\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndef transform_data(df, is_train_dataset = True):\n    df_transformed = df.copy()\n    df_transformed[\"IsMale\"] = df[\"Sex\"].apply(lambda x: x == \"male\")\n    \n    df_transformed['TicketFreq'] = df_train.groupby('Ticket')['Ticket'].transform('count')\n    \n    df_transformed = df_transformed.drop(['Ticket', 'Sex', 'Name', 'Fare', 'Age', 'Parch', 'SibSp','Cabin', 'Embarked'], axis=1) \n    \n    if (is_train_dataset):\n        df_transformed = df_transformed.drop(['PassengerId'],axis=1)\n    \n    return df_transformed\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntemp_df = transform_data(df_train)\ntemp_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>IsMale</th>\n      <th>TicketFreq</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>True</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>True</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nsns.barplot(x='IsMale', y='Survived', data=temp_df) \n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\n<Axes: xlabel='IsMale', ylabel='Survived'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-2.png){width=589 height=429}\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nsns.barplot(x='TicketFreq', y='Survived', data=temp_df) \n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\n<Axes: xlabel='TicketFreq', ylabel='Survived'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-2.png){width=589 height=429}\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nsns.barplot(x='Pclass', y='Survived', data=temp_df) \n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n<Axes: xlabel='Pclass', ylabel='Survived'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-2.png){width=589 height=429}\n:::\n:::\n\n\n## Model Training\nIn this part we will experiment with several classifier model\n\nTo measure performance we will split the training data into `train` and `test`. So we will not touch the real `test` dataset to measure performance during our training process, this is to prevent data test leak. We will use 80/20 train-test split\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\npredictors = ['IsMale', 'Pclass', 'TicketFreq']\nlabel = 'Survived'\n```\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_train_transformed = transform_data(df_train)\n\nX = df_train_transformed[predictors]\ny = df_train_transformed[label]\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n```\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier()\n\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nfrom sklearn import metrics\n\nprint('Accuracy:', metrics.accuracy_score(y_test, predictions))\nprint('Precision:', metrics.precision_score(y_test,predictions))\nprint('Recall:', metrics.recall_score(y_test, predictions))\nprint('F1:', metrics.f1_score(y_test, predictions))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 0.8\nPrecision: 0.8080808080808081\nRecall: 0.6666666666666666\nF1: 0.730593607305936\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nfrom sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\npredictions = dt.predict(X_test)\n```\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nprint('Accuracy:', metrics.accuracy_score(y_test, predictions))\nprint('Precision:', metrics.precision_score(y_test,predictions))\nprint('Recall:', metrics.recall_score(y_test, predictions))\nprint('F1:', metrics.f1_score(y_test, predictions))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 0.8\nPrecision: 0.8080808080808081\nRecall: 0.6666666666666666\nF1: 0.730593607305936\n```\n:::\n:::\n\n\nBased on the comparison above, random forest classifier model gives better accuracy, that is why we will choose this model for our final prediction\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf_test_transformed = transform_data(df_test)\nX_test_submission = df_test_transformed[predictors]\n```\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nmodel = RandomForestClassifier()\n\nmodel.fit(X, y)\npredictions = model.predict(X_test_submission)\n```\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\noutput= pd.DataFrame (pd.DataFrame({\n    \"PassengerId\": df_test[\"PassengerId\"],\n    \"Survived\": predictions}))\noutput.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\noutput.to_csv('FinalSubmission.csv', index=False)\n```\n:::\n\n\nHere is the result when we submit this to kaggle competition\n![image](pict/Screenshot_result.png)\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}